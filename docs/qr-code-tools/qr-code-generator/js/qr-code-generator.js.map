{"version":3,"sources":["pages/qr-code-tools/qr-code-generator/js/qr-code-generator.js"],"names":["QrCodeType","TEXT","URL","urlRegex","getUrlFormData","url","validation","rule","regex","value","test","error","message","validate","field","key","validationResult","this","document","store","type","qrCode","generateQrCode","text","options","makeCode","QRCode","getElementById","changeValueAndGenerateQrCode","changeType","isType","Alpine"],"mappings":"aAAA,IAAMA,WAAa,CACfC,KAAM,OADJD,IAAAA,MACFC,MAAM,QACNC,MAAK,SAGRC,SAAA,2CAID,SAASC,iBACL,MAAO,CACAC,IAAI,GACPC,WAAY,CACHD,IAAA,CACKE,KAAA,CACKC,MAAAA,SAAeC,GACN,OAACC,SAAWA,KAAED,GACf,CACSE,OAAA,EACHC,QAAA,IAGN,CACQD,OAAA,EACFC,QAAA,8BAKlBD,OAAK,EACLC,QAAE,KAGjBC,SAAQ,SAAAC,GACC,IAAMC,IAAOA,KAAKT,KAAAA,WAAkBC,GAAMA,KAAA,CACrCS,IAAAA,EAAwBV,KAAUA,WAAQC,GAAUA,KAAKO,GAAKG,KAAEH,IAClEE,GAAAA,EAAwBL,MAAA,CACnBL,KAAUA,WAAQK,GAAQA,OAAI,EAC9BL,KAAUA,WAAQM,GAAUI,QAAAA,EAAwBJ,QACzD,MAECN,KAAAA,WAAkBK,GAAQA,OAAK,EAC/BL,KAAAA,WAAkBM,GAAOA,QAAK,MAOnDM,SACWC,iBAAgB,cAAA,WACnBC,OAAMpB,MAAAA,SAAe,CACrBS,KAAST,WAAAC,KACToB,MAAQ,GAERC,OAAAA,KAEQC,eAAWd,WACd,IAAAe,EAAA,CACSH,KAAMJ,KAAER,OAETY,KAAOI,SACTR,KAAAI,OAAA,IAAAK,OAAAR,SAAAS,eAAA,iBAAAH,IAGVP,KAAAI,OAAAI,SAAAR,KAAAR,QAKAmB,6BAAA,SAAAnB,GAEDoB,KAAUpB,MAAAoB,EACDT,KAAIE,kBAITO,WAAYT,SAAAA,GAChBH,KAAAG,KAAAA,GAINU,OAAA,SAAAV,GALU,OAAOH,KAAKG,OAASA,KAI7BW,OAAOZ,MAAM,UAAUG","file":"qr-code-generator.js","sourcesContent":["const QrCodeType = {\r\n    TEXT: 'TEXT',\r\n    URL: 'URL',\r\n    EMAIL: 'EMAIL',\r\n    VCARD: 'VCARD',\r\n}\r\n\r\nconst urlRegex = /^(https?|chrome):\\/\\/[^\\s$.?#].[^\\s]*$/gm;\r\n\r\nfunction getUrlFormData() {\r\n    return {\r\n        url: '',\r\n        validation: {\r\n            url: {\r\n                rule: {\r\n                    regex: function (value) {\r\n                        if (urlRegex.test(value)) {\r\n                            return {\r\n                                error: false,\r\n                                message: '',\r\n                            };\r\n                        } else {\r\n                            return {\r\n                                error: true,\r\n                                message: 'Please input correct URL',\r\n                            };\r\n                        }\r\n                    }\r\n                },\r\n                error: false,\r\n                message: '',\r\n            },\r\n        },\r\n        validate (field) {\r\n            for (const key in this.validation[field].rule) {\r\n                const validationResult = this.validation[field].rule[key](this[field])\r\n                if (validationResult.error) {\r\n                    this.validation[field].error = true;\r\n                    this.validation[field].message = validationResult.message;\r\n                    break;\r\n                }\r\n                this.validation[field].error = false;\r\n                this.validation[field].message = '';\r\n                continue;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ndocument.addEventListener('alpine:init', () => {\r\n    Alpine.store('qrCode', {\r\n        type: QrCodeType.TEXT,\r\n        value: '',\r\n        qrCode: null,\r\n\r\n        generateQrCode() {\r\n            let options = {\r\n                text: this.value\r\n            };\r\n            if( !this.qrCode) {\r\n                this.qrCode = new QRCode(document.getElementById('qr-code-image'), options);\r\n                this.qrCode.makeCode(this.value);\r\n            } else {\r\n                this.qrCode.makeCode(this.value);\r\n            }\r\n        },\r\n\r\n        changeValueAndGenerateQrCode(value) {\r\n            this.value = value;\r\n            this.generateQrCode();\r\n        },\r\n\r\n        changeType(type) {\r\n            this.type = type;\r\n        },\r\n\r\n        isType(type) {\r\n            return this.type === type;\r\n        }\r\n    });\r\n\r\n    Alpine.store('qrCode').generateQrCode();\r\n});\r\n"]}