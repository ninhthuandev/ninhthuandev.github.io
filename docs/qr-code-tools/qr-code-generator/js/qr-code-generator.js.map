{"version":3,"sources":["pages/qr-code-tools/qr-code-generator/js/qr-code-generator.js"],"names":["QrCodeType","TEXT","URL","EMAIL","VCARD","SMS","WIFI","MimeType","urlRegex","validateForm","field","SVG","key","this","validation","rule","validationResult","error","message","mimeType","console","link","document","createElement","href","qrCodeBlobImage","triggerDownloadImage","find","toLowerCase","click","download","Alpine","downloadQrCode","addEventListener","url","store","regex","value","test","validate","apply","subject","body","toQrCodeStringFromEmailData","data","email","concat","length","organization","jobTitle","phone","address","firstName","lastName","toQrCodeStringFromVCardData","website","str","replace","log","toQrCodeStringFromSmsData","phoneNumber","hidden","password","encryption","toQrCodeStringFromWifiData","ssid","drawer","defaultQrCodeOptions","quietZone","QRCode","CorrectLevel","M","qrCode","generateQrCode","options","text","_objectSpread","getElementById","makeCode","svgString","blob","type","objectUrl","createObjectURL","Blob","fakeElement","changeValueAndGenerateQrCode","style","remove","changeType","isType"],"mappings":"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","file":"qr-code-generator.js","sourcesContent":["const QrCodeType = {\r\n    TEXT: 'TEXT',\r\n    URL: 'URL',\r\n    EMAIL: 'EMAIL',\r\n    VCARD: 'VCARD',\r\n    SMS: 'SMS',\r\n    WIFI: 'WIFI',\r\n}\r\n\r\nconst MimeType = {\r\n    PNG: 'image/png',\r\n    SVG: 'image/svg+xml',\r\n    JPG: 'image/jpeg',\r\n}\r\n\r\nconst urlRegex = /^(https?|chrome):\\/\\/[^\\s$.?#].[^\\s]*$/gm;\r\n\r\nfunction validateForm(field) {\r\n    for (const key in this.validation[field].rule) {\r\n        const validationResult = this.validation[field].rule[key](this[field])\r\n        if (validationResult.error) {\r\n            this.validation[field].error = true;\r\n            this.validation[field].message = validationResult.message;\r\n            break;\r\n        }\r\n        this.validation[field].error = false;\r\n        this.validation[field].message = '';\r\n    }\r\n}\r\n\r\nfunction triggerDownloadImage(qrCodeBlobImage, mimeType) {\r\n    console.log('Trigger download image');\r\n    const link = document.createElement('a');\r\n    link.href = qrCodeBlobImage;\r\n    link.download = 'qr-code.' + Object.keys(MimeType).find(key => MimeType[key] === mimeType).toLowerCase();\r\n    link.click();\r\n}\r\n\r\nfunction downloadQrCode(mimeType) {\r\n    Alpine.store('qrCode').downloadQrCode(mimeType);\r\n}\r\n\r\ndocument.addEventListener('alpine:init', () => {\r\n    Alpine.data('urlFormData', () => ({\r\n        url: '',\r\n        validation: {\r\n            url: {\r\n                rule: {\r\n                    regex: function (value) {\r\n                        if (urlRegex.test(value)) {\r\n                            return {\r\n                                error: false,\r\n                                message: '',\r\n                            };\r\n                        } else {\r\n                            return {\r\n                                error: true,\r\n                                message: 'Please input correct URL',\r\n                            };\r\n                        }\r\n                    }\r\n                },\r\n                error: false,\r\n                message: '',\r\n            },\r\n        },\r\n        validate(field) {\r\n            validateForm.apply(this, [field]);\r\n        }\r\n    }));\r\n\r\n    Alpine.data('emailFormData', () => ({\r\n        email: '',\r\n        subject: '',\r\n        body: '',\r\n        toQrCodeStringFromEmailData() {\r\n            return `mailto:${this.email}?subject=${this.subject}&body=${this.body}`;\r\n        },\r\n        validation: {\r\n            email: {\r\n                rule: {\r\n                    regex: function (value) {\r\n                        if (value.length === 0) {\r\n                            return {\r\n                                error: false,\r\n                                message: '',\r\n                            };\r\n                        }\r\n                        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n                        if (emailRegex.test(value)) {\r\n                            return {\r\n                                error: false,\r\n                                message: '',\r\n                            };\r\n                        } else {\r\n                            return {\r\n                                error: true,\r\n                                message: 'Please input correct email',\r\n                            };\r\n                        }\r\n                    }\r\n                },\r\n                error: false,\r\n                message: '',\r\n            },\r\n        },\r\n        validate(field) {\r\n            validateForm.apply(this, [field]);\r\n        }\r\n    }));\r\n\r\n    Alpine.data('vCardFormData', () => ({\r\n        firstName: '',\r\n        lastName: '',\r\n        organization: '',\r\n        jobTitle: '',\r\n        phone: '',\r\n        email: '',\r\n        address: '',\r\n        website: '',\r\n        toQrCodeStringFromVCardData() {\r\n            let str = `BEGIN:VCARD\r\n            VERSION:3.0\r\n            N:${this.lastName};${this.firstName};;;\r\n            FN:${this.firstName} ${this.lastName}\r\n            ORG:${this.organization}\r\n            TITLE:${this.jobTitle}\r\n            TEL:${this.phone}\r\n            EMAIL:${this.email}\r\n            ADR:;;${this.address};;;;;\r\n            URL:${this.website}\r\n            END:VCARD`;\r\n\r\n            // remove indentations\r\n            str = str.replace(/  +/g, '');\r\n\r\n            console.log(str);\r\n            return str;\r\n        }\r\n    }));\r\n\r\n    Alpine.data('smsFormData', () => ({\r\n        phoneNumber: '',\r\n        message: '',\r\n        toQrCodeStringFromSmsData() {\r\n            return `SMSTO:${this.phoneNumber}:${this.message}`;\r\n        }\r\n    }));\r\n\r\n    Alpine.data('wifiFormData', () => ({\r\n        ssid: '',\r\n        hidden: false,\r\n        password: '',\r\n        encryption: 'WPA',\r\n        toQrCodeStringFromWifiData() {\r\n            return `WIFI:S:${this.ssid};T:${this.encryption};P:${this.password};H:${this.hidden ? 'true' : 'false'};`;\r\n        }\r\n    }));\r\n\r\n    const defaultQrCodeOptions = {\r\n        correctLevel: QRCode.CorrectLevel.M,\r\n        drawer: 'canvas',\r\n        quietZone: 20,\r\n    }\r\n\r\n    Alpine.store('qrCode', {\r\n        type: QrCodeType.TEXT,\r\n        value: '',\r\n        qrCode: null,\r\n\r\n        generateQrCode() {\r\n            let options = {\r\n                ...defaultQrCodeOptions,\r\n                text: this.value,\r\n            };\r\n            if (!this.qrCode) {\r\n                this.qrCode = new QRCode(document.getElementById('qr-code-image'), options);\r\n                this.qrCode.makeCode(this.value);\r\n            } else {\r\n                this.qrCode.makeCode(this.value);\r\n            }\r\n        },\r\n\r\n        downloadQrCode(mimeType) {\r\n            let options = {\r\n                ...defaultQrCodeOptions,\r\n                text: this.value,\r\n                drawer: mimeType === MimeType.SVG ? 'svg' : 'canvas',\r\n                onRenderingEnd: (_, data) => {\r\n                    console.log(\"Rendering end\", data);\r\n                    if (mimeType === MimeType.SVG) {\r\n                        const svgString =\r\n                        `<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n                        ${data}`\r\n\r\n                        let blob = new Blob([svgString], {type: MimeType.SVG});\r\n\r\n                        let objectUrl = URL.createObjectURL(blob);\r\n\r\n                        console.log('Download SVG QR Code');\r\n                        triggerDownloadImage(objectUrl, mimeType);\r\n                    } else {\r\n                        console.log('Download PNG QR Code');\r\n                        triggerDownloadImage(data, mimeType);\r\n                    }\r\n                }\r\n            };\r\n\r\n            let fakeElement = document.createElement('div');\r\n\r\n            fakeElement.style.width = '1000px';\r\n            let qrCode = new QRCode(fakeElement, options);\r\n\r\n            fakeElement.remove();\r\n        },\r\n\r\n        changeValueAndGenerateQrCode(value) {\r\n            this.value = value;\r\n            this.generateQrCode();\r\n        },\r\n\r\n        changeType(type) {\r\n            this.type = type;\r\n        },\r\n\r\n        isType(type) {\r\n            return this.type === type;\r\n        }\r\n    });\r\n\r\n    Alpine.store('qrCode').generateQrCode();\r\n})\r\n;\r\n"]}