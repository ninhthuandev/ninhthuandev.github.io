{"version":3,"sources":["pages/qr-code-tools/qr-code-generator/js/qr-code-generator.js"],"names":["QrCodeType","TEXT","URL","EMAIL","VCARD","urlRegex","validateForm","field","key","this","validation","rule","validationResult","error","message","document","data","Alpine","url","regex","value","test","validate","apply","email","subject","body","toQrCodeStringFromEmailData","concat","length","emailRegex","firstName","lastName","organization","jobTitle","phone","address","website","str","replace","log","phoneNumber","toQrCodeStringFromSmsData","ssid","hidden","password","encryption","correctLevel","QRCode","type","qrCode","generateQrCode","makeCode","text","CorrectLevel","M","getElementById","options","changeValueAndGenerateQrCode","store","changeType","isType"],"mappings":"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","file":"qr-code-generator.js","sourcesContent":["const QrCodeType = {\r\n    TEXT: 'TEXT',\r\n    URL: 'URL',\r\n    EMAIL: 'EMAIL',\r\n    VCARD: 'VCARD',\r\n    SMS: 'SMS',\r\n    WIFI: 'WIFI',\r\n}\r\n\r\nconst urlRegex = /^(https?|chrome):\\/\\/[^\\s$.?#].[^\\s]*$/gm;\r\n\r\nfunction validateForm(field) {\r\n    for (const key in this.validation[field].rule) {\r\n        const validationResult = this.validation[field].rule[key](this[field])\r\n        if (validationResult.error) {\r\n            this.validation[field].error = true;\r\n            this.validation[field].message = validationResult.message;\r\n            break;\r\n        }\r\n        this.validation[field].error = false;\r\n        this.validation[field].message = '';\r\n    }\r\n}\r\n\r\ndocument.addEventListener('alpine:init', () => {\r\n    Alpine.data('urlFormData', () => ({\r\n        url: '',\r\n        validation: {\r\n            url: {\r\n                rule: {\r\n                    regex: function (value) {\r\n                        if (urlRegex.test(value)) {\r\n                            return {\r\n                                error: false,\r\n                                message: '',\r\n                            };\r\n                        } else {\r\n                            return {\r\n                                error: true,\r\n                                message: 'Please input correct URL',\r\n                            };\r\n                        }\r\n                    }\r\n                },\r\n                error: false,\r\n                message: '',\r\n            },\r\n        },\r\n        validate(field) {\r\n            validateForm.apply(this, [field]);\r\n        }\r\n    }));\r\n\r\n    Alpine.data('emailFormData', () => ({\r\n        email: '',\r\n        subject: '',\r\n        body: '',\r\n        toQrCodeStringFromEmailData() {\r\n            return `mailto:${this.email}?subject=${this.subject}&body=${this.body}`;\r\n        },\r\n        validation: {\r\n            email: {\r\n                rule: {\r\n                    regex: function (value) {\r\n                        if (value.length === 0) {\r\n                            return {\r\n                                error: false,\r\n                                message: '',\r\n                            };\r\n                        }\r\n                        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n                        if (emailRegex.test(value)) {\r\n                            return {\r\n                                error: false,\r\n                                message: '',\r\n                            };\r\n                        } else {\r\n                            return {\r\n                                error: true,\r\n                                message: 'Please input correct email',\r\n                            };\r\n                        }\r\n                    }\r\n                },\r\n                error: false,\r\n                message: '',\r\n            },\r\n        },\r\n        validate(field) {\r\n            validateForm.apply(this, [field]);\r\n        }\r\n    }));\r\n\r\n    Alpine.data('vCardFormData', () => ({\r\n        firstName: '',\r\n        lastName: '',\r\n        organization: '',\r\n        jobTitle: '',\r\n        phone: '',\r\n        email: '',\r\n        address: '',\r\n        website: '',\r\n        toQrCodeStringFromVCardData() {\r\n            let str= `BEGIN:VCARD\r\n            VERSION:3.0\r\n            N:${this.lastName};${this.firstName};;;\r\n            FN:${this.firstName} ${this.lastName}\r\n            ORG:${this.organization}\r\n            TITLE:${this.jobTitle}\r\n            TEL:${this.phone}\r\n            EMAIL:${this.email}\r\n            ADR:;;${this.address};;;;;\r\n            URL:${this.website}\r\n            END:VCARD`;\r\n\r\n            // remove indentations\r\n            str = str.replace(/  +/g, '');\r\n\r\n            console.log(str);\r\n            return str;\r\n        }\r\n    }));\r\n\r\n    Alpine.data('smsFormData', () => ({\r\n        phoneNumber: '',\r\n        message: '',\r\n        toQrCodeStringFromSmsData() {\r\n            return `SMSTO:${this.phoneNumber}:${this.message}`;\r\n        }\r\n    }));\r\n\r\n    Alpine.data('wifiFormData', () => ({\r\n        ssid: '',\r\n        hidden: false,\r\n        password: '',\r\n        encryption: 'WPA',\r\n        toQrCodeStringFromWifiData() {\r\n            return `WIFI:S:${this.ssid};T:${this.encryption};P:${this.password};H:${this.hidden ? 'true' : 'false'};`;\r\n        }\r\n    }));\r\n\r\n    Alpine.store('qrCode', {\r\n        type: QrCodeType.TEXT,\r\n        value: '',\r\n        qrCode: null,\r\n\r\n        generateQrCode() {\r\n            let options = {\r\n                text: this.value,\r\n                correctLevel: QRCode.CorrectLevel.M,\r\n            };\r\n            if (!this.qrCode) {\r\n                this.qrCode = new QRCode(document.getElementById('qr-code-image'), options);\r\n                this.qrCode.makeCode(this.value);\r\n            } else {\r\n                this.qrCode.makeCode(this.value);\r\n            }\r\n        },\r\n\r\n        changeValueAndGenerateQrCode(value) {\r\n            this.value = value;\r\n            this.generateQrCode();\r\n        },\r\n\r\n        changeType(type) {\r\n            this.type = type;\r\n        },\r\n\r\n        isType(type) {\r\n            return this.type === type;\r\n        }\r\n    });\r\n\r\n    Alpine.store('qrCode').generateQrCode();\r\n})\r\n;\r\n"]}