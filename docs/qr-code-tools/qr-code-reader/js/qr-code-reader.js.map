{"version":3,"sources":["pages/qr-code-tools/qr-code-reader/js/qr-code-reader.js"],"names":["html5QrCode","Html5Qrcode","startScanningQrCode","cameraId","windowWidth","window","innerWidth","windowHeight","innerHeight","offsetWidth","readerWidth","document","getElementById","qrBoxSize","readerHeight","Alpine","store","start","setScanning","height","fps","decodedText","stop","width","ignore","decodedResult","console","then","log","err","setDecodedInfo","errorMessage","stopScanningQrCode","addEventListener","devices","id","label","selectedDevice","changeDevices","setDevices","this","device","deviceId","event","target","value","find","scanning","getCameras","length","error"],"mappings":"aAAA,IAAMA,YAAc,IAAIC,YAAY,UAApC,SAAMD,oBAAkBC,GAExB,IAASC,EAAAA,OAAoBC,WACnBC,EAAcC,OAAOC,YACrBC,EAAeF,SAAOG,eAAW,UAAAC,YACjCC,EAAcC,EAASC,EAAyBH,EAIlDI,EADkB,GACNH,EAGZG,EAAYC,IAChBD,EALsB,GAKtBC,GAIOC,OAAAC,MAAA,YAIPhB,OAAYiB,MACRd,UACAe,aAAA,GAFJlB,YAIuBa,MAAWM,EAAoB,CAElDC,IAACC,GACGrB,MAAYsB,CAAIC,MAAOV,EAACW,OAAUX,IAEhC,SAAAQ,EAAOI,GACLC,YAAYJ,OAAaK,KAAA,SAAAH,GAC3BE,QAASE,IAAA,kBAAMJ,KACNR,MAAM,SAAAa,GACNb,QAAMY,IAAS,QAACE,KACzB,QAAA,WAELC,OAAAA,MAAiB,UAAAb,aAAA,GACFa,OAAAA,MAAa,UAAAD,eAAAT,EAAAI,MAI3B,SAAAM,GAEVL,QAAAE,IAAAG,KAESC,MACOV,SAAAA,GACAM,QAAIA,IAAAC,MAFpB,SAOMG,qBACNhC,YAAAsB,OAAAK,KAAA,SAAAH,GAEQE,QAACO,IAAAA,kBAA8BT,KACnCT,MAAOC,SAAAA,GACHkB,QAAUN,IAAA,QAAAC,KAACM,QAAM,WAAEC,OAAOpB,MAAA,UAAAE,aAAA,KAFlCP,SAKYsB,iBAAeC,cAAO,WAJ9BnB,OAKasB,MAAAA,gBAAiBH,CACzBA,QAAA,CAAA,CAAAC,GAAA,GAAAC,MAAA,KACDE,eAAa,GACTC,WAAc,SAAAL,GACTG,KAAAA,QAAcH,EAA2BM,KAAIC,eAAcC,EAAQ,IAC5EJ,cAAA,SAAAK,GACF,IAAAD,EAAAC,EAAAC,OAAAC,MAEK7B,KAAMqB,eAAUG,KAAAN,QAAAY,KAAA,SAAAL,GAAA,OAAAA,EAAAN,KAAAO,OAKnBZ,OAAAA,MAAAA,SAAc,CACVT,iBAAKA,EACLI,mBAAKA,EACRsB,UAAA,EAEGjB,eAAgBiB,SAAAA,EAAQtB,GAC5Be,KAAAnB,YAAAA,EACFmB,KAAAf,cAAAA,GAEFP,YAAA,SAAA6B,GACA9C,KAAY+C,SAAarB,KAKrB1B,YAAW+C,aAAYC,KAAM,SAAAf,GAO/BA,GAAOA,EAAOe,SACJC,QAAMtB,IAAA,WAAQM,GAE5BnB,OAAAC,MAAA,iBAAAuB,WAAAL,GALUR,QAAQE,IAAI,OAAQb,OAAOC,MAAM,iBAAiBkB,QAAQ,GAAGC,OAEnE,MAAO,SAAAN,GACLH,QAAQwB,MAAM","file":"qr-code-reader.js","sourcesContent":["const html5QrCode = new Html5Qrcode(\"reader\");\r\n\r\nfunction startScanningQrCode(cameraId) {\r\n    const windowWidth = window.innerWidth;\r\n    const windowHeight = window.innerHeight;\r\n    const readerWidth = document.getElementById('reader').offsetWidth;\r\n    const readerHeight = windowHeight * readerWidth / windowWidth;\r\n\r\n    const qrBoxRatio = 0.7;\r\n    let qrBoxSize = readerWidth * qrBoxRatio;\r\n\r\n    if (readerHeight < readerWidth) {\r\n        qrBoxSize = readerHeight * qrBoxRatio;\r\n    }\r\n\r\n    if (!Alpine.store('qrCode')) {\r\n        return;\r\n    } else {\r\n        Alpine.store('qrCode').setScanning(true);\r\n    }\r\n\r\n    html5QrCode.start(\r\n        cameraId,\r\n        {\r\n            fps: 10,\r\n            qrbox: {width: qrBoxSize, height: qrBoxSize}  // Optional, if you want bounded box UI\r\n        },\r\n        (decodedText, decodedResult) => {\r\n            html5QrCode.stop().then(ignore => {\r\n                console.log(\"QR Code stopped\", ignore);\r\n            }).catch(err => {\r\n                console.log(\"Error\", err);\r\n            }).finally(() => {\r\n                Alpine.store('qrCode').setScanning(false);\r\n                Alpine.store('qrCode').setDecodedInfo(decodedText, decodedResult);\r\n            });\r\n        },\r\n        (errorMessage) => {\r\n            console.log(errorMessage);\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n\r\n}\r\n\r\nfunction stopScanningQrCode() {\r\n    html5QrCode.stop().then(ignore => {\r\n        console.log(\"QR Code stopped\", ignore);\r\n    }).catch(err => {\r\n        console.log(\"Error\", err);\r\n    }).finally(() => {\r\n        Alpine.store('qrCode').setScanning(false);\r\n    });\r\n}\r\n\r\ndocument.addEventListener('alpine:init', () => {\r\n    Alpine.store('cameraDevices', {\r\n        devices: [{id: '', label: ''}],\r\n        selectedDevice: {},\r\n        setDevices(devices) {\r\n            this.devices = devices;\r\n            this.selectedDevice = devices[0];\r\n        },\r\n        changeDevices(event) {\r\n            const deviceId = event.target.value;\r\n            this.selectedDevice = this.devices.find(device => device.id === deviceId);\r\n        }\r\n    });\r\n\r\n    Alpine.store('qrCode', {\r\n        decodedText: undefined,\r\n        decodedResult: undefined,\r\n        scanning: false,\r\n\r\n        setDecodedInfo(decodedText, decodedResult) {\r\n            this.decodedText = decodedText;\r\n            this.decodedResult = decodedResult;\r\n        },\r\n        setScanning(scanning) {\r\n            this.scanning = scanning;\r\n        }\r\n    });\r\n\r\n    // This method will trigger user permissions\r\n    Html5Qrcode.getCameras().then(devices => {\r\n        /**\r\n         * devices would be an array of objects of type:\r\n         * { id: \"id\", label: \"label\" }\r\n         */\r\n        if (devices && devices.length) {\r\n            console.log(\"Devices:\", devices);\r\n\r\n            Alpine.store('cameraDevices').setDevices(devices);\r\n\r\n            console.log(\"Test\", Alpine.store('cameraDevices').devices[0].id);\r\n        }\r\n    }).catch(err => {\r\n        console.error('Error');\r\n    });\r\n});"]}