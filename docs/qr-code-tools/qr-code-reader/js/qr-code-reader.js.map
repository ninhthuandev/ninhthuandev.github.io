{"version":3,"sources":["pages/qr-code-tools/qr-code-reader/js/qr-code-reader.js"],"names":["html5QrCodeForCamera","Html5Qrcode","html5QrCodeForFileUpload","cameraId","startScanningQrCode","windowWidth","window","innerWidth","windowHeight","innerHeight","offsetWidth","readerWidth","document","getElementById","qrBoxSize","readerHeight","Alpine","store","start","height","fps","decodedText","stop","decodedResult","console","then","ignore","log","err","setDecodedInfo","errorMessage","setScanning","decodeQrCodeFromImage","event","length","scanFile","target","imageFile","files","stopScanningQrCode","clear","error","selectedTab","isTab","Tabs","CAMERA","FILE_UPLOAD","addEventListener","devices","label","tab","this","switchTab","selectedDevice","changeDevices","undefined","deviceId","id","arguments","value","find","device","scanning","isError","getCameras","setDevices"],"mappings":"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","file":"qr-code-reader.js","sourcesContent":["const html5QrCodeForCamera = new Html5Qrcode(\"reader\");\r\nconst html5QrCodeForFileUpload = new Html5Qrcode(\"file-reader\");\r\n\r\nfunction startScanningQrCode(cameraId) {\r\n    const windowWidth = window.innerWidth;\r\n    const windowHeight = window.innerHeight;\r\n    const readerWidth = document.getElementById('reader').offsetWidth;\r\n    const readerHeight = windowHeight * readerWidth / windowWidth;\r\n\r\n    const qrBoxRatio = 0.7;\r\n    let qrBoxSize = readerWidth * qrBoxRatio;\r\n\r\n    if (readerHeight < readerWidth) {\r\n        qrBoxSize = readerHeight * qrBoxRatio;\r\n    }\r\n\r\n    if (!Alpine.store('qrCode')) {\r\n        return;\r\n    } else {\r\n        Alpine.store('qrCode').setScanning(true);\r\n    }\r\n\r\n    html5QrCodeForCamera.start(\r\n        cameraId,\r\n        {\r\n            fps: 10,\r\n            qrbox: {width: qrBoxSize, height: qrBoxSize}  // Optional, if you want bounded box UI\r\n        },\r\n        (decodedText, decodedResult) => {\r\n            html5QrCodeForCamera.stop().then(ignore => {\r\n                console.log(\"QR Code stopped\", ignore);\r\n            }).catch(err => {\r\n                console.log(\"Error\", err);\r\n            }).finally(() => {\r\n                Alpine.store('qrCode').setScanning(false);\r\n                Alpine.store('qrCode').setDecodedInfo(decodedText, decodedResult);\r\n            });\r\n        },\r\n        (errorMessage) => {\r\n            console.log(errorMessage);\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n\r\n}\r\n\r\nfunction decodeQrCodeFromImage(event) {\r\n    const files = event.target.files;\r\n    if (files.length === 0) {\r\n        return;\r\n    }\r\n    const imageFile = event.target.files[0];\r\n    // Scan QR Code\r\n    html5QrCodeForFileUpload.scanFile(imageFile, true)\r\n        .then(decodedText => {\r\n            Alpine.store('qrCode').setDecodedInfo(decodedText, null);\r\n        })\r\n        .catch(err => {\r\n            console.log(\"Error cannot decode QR Code from image\", err);\r\n            Alpine.store('qrCode').setDecodedInfo(null, null, true);\r\n        });\r\n}\r\n\r\nfunction stopScanningQrCode() {\r\n    try {\r\n        html5QrCodeForCamera.stop().then(ignore => {\r\n            console.log(\"QR Code stopped\", ignore);\r\n        }).catch(err => {\r\n            console.log(\"Error\", err);\r\n            html5QrCodeForCamera.clear();\r\n        }).finally(() => {\r\n            Alpine.store('qrCode').setScanning(false);\r\n        });\r\n    } catch (err) {\r\n        html5QrCodeForCamera.clear();\r\n        console.error(\"ERR: \",err);\r\n    } finally {\r\n        Alpine.store('qrCode').setScanning(false);\r\n    }\r\n}\r\n\r\nconst Tabs = {\r\n    CAMERA: 'CAMERA',\r\n    FILE_UPLOAD: 'FILE_UPLOAD',\r\n}\r\n\r\ndocument.addEventListener('alpine:init', () => {\r\n    Alpine.store('tab', {\r\n        selectedTab: Tabs.CAMERA,\r\n\r\n        isTab(tab) {\r\n            return this.selectedTab === tab;\r\n        },\r\n\r\n        switchTab(tab) {\r\n            this.selectedTab = tab;\r\n\r\n            Alpine.store('qrCode').setDecodedInfo(undefined, undefined);\r\n            html5QrCodeForCamera.clear();\r\n            html5QrCodeForFileUpload.clear();\r\n        }\r\n    });\r\n\r\n    Alpine.store('cameraDevices', {\r\n        devices: [{id: '', label: ''}],\r\n        selectedDevice: {},\r\n        setDevices(devices) {\r\n            this.devices = devices;\r\n            this.selectedDevice = devices[0];\r\n        },\r\n        changeDevices(event) {\r\n            const deviceId = event.target.value;\r\n            this.selectedDevice = this.devices.find(device => device.id === deviceId);\r\n        }\r\n    });\r\n\r\n    Alpine.store('qrCode', {\r\n        decodedText: undefined,\r\n        decodedResult: undefined,\r\n        scanning: false,\r\n        isError: false,\r\n\r\n        setDecodedInfo(decodedText, decodedResult, isError = false) {\r\n            this.decodedText = decodedText;\r\n            this.decodedResult = decodedResult;\r\n            this.isError = isError;\r\n        },\r\n        setScanning(scanning) {\r\n            this.scanning = scanning;\r\n        }\r\n    });\r\n\r\n    // This method will trigger user permissions\r\n    Html5Qrcode.getCameras().then(devices => {\r\n        /**\r\n         * devices would be an array of objects of type:\r\n         * { id: \"id\", label: \"label\" }\r\n         */\r\n        if (devices && devices.length) {\r\n            console.log(\"Devices:\", devices);\r\n\r\n            Alpine.store('cameraDevices').setDevices(devices);\r\n\r\n            console.log(\"Test\", Alpine.store('cameraDevices').devices[0].id);\r\n        }\r\n    }).catch(err => {\r\n        console.error('Error');\r\n    });\r\n});"]}