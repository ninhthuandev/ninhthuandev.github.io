{"version":3,"sources":["pages/crypto-tools/public-key-infrastructure/rsa/rsa.js"],"names":["document","addEventListener","rsa","forge","pki","console","Alpine","store","bits","privateKeyPem","publicKeyPem","init","generateKeyPair","this","workers","param","err","keypair","root","privateKeyToPem","privateKey","publicKeyToPem","publicKey","algorithm","encrypt","encryptedText","errorMessage","clearText","e","publicKeyFromPem","util","encode64","encryptWithAlgorithm","message","md","sha1","create","Error","sha256","mgf1","decrypt","log","privateKeyFromPem","decryptWithAlgorithm","decode64"],"mappings":"aAAAA,SAASC,iBAAiB,cAAe,WACrC,IAAIC,EAAMC,MAAMC,IAAIF,IAApBG,QAAUF,IAAAA,GAIVG,OAAOC,MAAM,MAAO,CACZC,KAAM,KACVC,cAAiB,GACjBC,aAAgB,GAGZC,KAAKC,WACRC,KAAAD,mBAIOJ,gBAAe,WACfM,IAASC,EAAA,CACZP,KAAAK,KAAAL,KAESM,QAAO,GAGRJ,EAAYG,KACnBX,EAAAU,gBAAAG,EAAA,SAAAC,EAAAC,GACNC,EAAAT,cAAAN,MAAAC,IAAAe,gBAAAF,EAAAG,YACFF,EAAAR,aAAAP,MAAAC,IAAAiB,eAAAJ,EAAAK,gBAMEC,OAAAA,MAAW,aAAA,CAEXC,UAAO,GACHC,cAAI,GACAC,aAAMhB,GACNL,UAAW,mBAEXmB,QAAMG,WACF,IACE,IAAEjB,EAAAJ,OAAAC,MAAA,OAAAG,aACHgB,QAAAA,IAAeE,GACb,IAAAN,EAAAnB,MAAAC,IAAAyB,iBAAAnB,GACXiB,EAAAd,KAAAc,UACHd,KAAAY,cAAAtB,MAAA2B,KAAAC,SAAAlB,KAAAmB,qBAAAV,EAAAK,EAAAd,KAAAU,YAEDS,MAAAA,GAEa,MADDT,KAAAA,aAASK,EAAAK,QACRL,IAILI,qBAAK,SAAAV,EAAoBK,EAAAJ,GACrB,OAAOD,GACCnB,IAAK,mBACX,OAAAmB,EAAAE,QAAAG,GACD,IAAA,WACML,OAAUE,EAAQG,QAASA,EAAY,YACtCxB,IAAK,qBACH,OAAAmB,EAAAE,QAAAG,EAAA,WAAA,CACQO,GAAGC,MAAKC,GAAAA,OAAOA,WAE/B,IAAA,gCACN,OAAAd,EAAAE,QAAAG,EAAA,WAAA,CACcU,GAAMlC,MAAA+B,GAAAI,OAAAF,SACxBG,KAAA,CACHL,GAAA/B,MAAA+B,GAAAC,KAAAC,YAIa3B,QACMA,MAAAA,IAAAA,MAAc,uBAI5B+B,QAAOZ,WACD,IACG,IAAAnB,EAAAH,OAAAC,MAAA,OAAAE,cACXJ,QAAAoC,IAAAhC,GACH,IAAAW,EAAAjB,MAAAC,IAAAsC,kBAAAjC,GAEDkC,EAAoBA,KAAAA,cACRpB,KAAAA,UAASV,KAAA8B,qBAAAvB,EAAAjB,MAAA2B,KAAAc,SAAAnB,GAAAZ,KAAAU,WACR,MAAAK,GAEA,MADDf,KAAOO,aAAmBK,EAAAA,QACzBG,IAJbe,qBAQ6BL,SAAAA,EAAcb,EAAAF,GAC7B,OAAAA,GACD,IAAA,mBACMH,OAAUA,EAASK,QAAAA,GAClBtB,IAAK,WACH,OAAAiB,EAAAoB,QAAAf,EAAA,YACA,IAAEtB,qBACR,OAAAiB,EAAAoB,QAAAf,EAAA,WAAA,CACFS,GAAA/B,MAAA+B,GAAAI,OAAAF,WAEI,IAAIC,gCAClB,OAAAjB,EAAAoB,QAAAf,EAAA,WAAA,CACJS,GAAA/B,MAAA+B,GAAAI,OAAAF,SACFG,KAAA,CACJL,GAAA/B,MAAA+B,GAAAC,KAAAC,YALc,QACI,MAAM,IAAIC,MAAM","file":"rsa.js","sourcesContent":["document.addEventListener('alpine:init', () => {\r\n    var rsa = forge.pki.rsa;\r\n\r\n    console.log(rsa)\r\n\r\n    Alpine.store('rsa', {\r\n        bits: 2048,\r\n        privateKeyPem: '',\r\n        publicKeyPem: '',\r\n\r\n        init() {\r\n            this.generateKeyPair();\r\n        },\r\n\r\n        generateKeyPair() {\r\n            const param = {\r\n                bits: this.bits,\r\n                workers: 2,\r\n            };\r\n\r\n            const root = this;\r\n            rsa.generateKeyPair(param, function (err, keypair) {\r\n                root.privateKeyPem = forge.pki.privateKeyToPem(keypair.privateKey);\r\n                root.publicKeyPem = forge.pki.publicKeyToPem(keypair.publicKey);\r\n            });\r\n        }\r\n    });\r\n\r\n    Alpine.store('encryption', {\r\n        clearText: \"\",\r\n        encryptedText: \"\",\r\n        errorMessage: \"\",\r\n        algorithm: 'RSAES-PKCS1-V1_5',\r\n\r\n        encrypt() {\r\n            try {\r\n                const publicKeyPem = Alpine.store('rsa').publicKeyPem;\r\n                console.log(publicKeyPem);\r\n                const publicKey = forge.pki.publicKeyFromPem(publicKeyPem);\r\n                const clearText = this.clearText;\r\n                this.encryptedText = forge.util.encode64(this.encryptWithAlgorithm(publicKey, clearText, this.algorithm));\r\n            } catch (e) {\r\n                this.errorMessage = e.message;\r\n                throw e;\r\n            }\r\n        },\r\n\r\n        encryptWithAlgorithm(publicKey, clearText, algorithm) {\r\n            switch (algorithm) {\r\n                case 'RSAES-PKCS1-V1_5':\r\n                    return publicKey.encrypt(clearText);\r\n                case 'RSA-OAEP':\r\n                    return publicKey.encrypt(clearText, 'RSA-OAEP');\r\n                case 'RSAES-OAEP/SHA-256':\r\n                    return publicKey.encrypt(clearText, 'RSA-OAEP', {\r\n                        md: forge.md.sha256.create()\r\n                    });\r\n                case 'RSAES-OAEP/SHA-256/MGF1-SHA-1':\r\n                    return publicKey.encrypt(clearText, 'RSA-OAEP', {\r\n                        md: forge.md.sha256.create(),\r\n                        mgf1: {\r\n                            md: forge.md.sha1.create()\r\n                        }\r\n                    });\r\n                default:\r\n                    throw new Error('Invalid algorithm');\r\n            }\r\n        },\r\n\r\n        decrypt() {\r\n            try {\r\n                const privateKeyPem = Alpine.store('rsa').privateKeyPem;\r\n                console.log(privateKeyPem);\r\n                const privateKey = forge.pki.privateKeyFromPem(privateKeyPem);\r\n                const encryptedText = this.encryptedText;\r\n                this.clearText = this.decryptWithAlgorithm(privateKey, forge.util.decode64(encryptedText), this.algorithm);\r\n            } catch (e) {\r\n                this.errorMessage = e.message;\r\n                throw e;\r\n            }\r\n        },\r\n\r\n        decryptWithAlgorithm(privateKey, encryptedText, algorithm) {\r\n            switch (algorithm) {\r\n                case 'RSAES-PKCS1-V1_5':\r\n                    return privateKey.decrypt(encryptedText);\r\n                case 'RSA-OAEP':\r\n                    return privateKey.decrypt(encryptedText, 'RSA-OAEP');\r\n                case 'RSAES-OAEP/SHA-256':\r\n                    return privateKey.decrypt(encryptedText, 'RSA-OAEP', {\r\n                        md: forge.md.sha256.create()\r\n                    });\r\n                case 'RSAES-OAEP/SHA-256/MGF1-SHA-1':\r\n                    return privateKey.decrypt(encryptedText, 'RSA-OAEP', {\r\n                        md: forge.md.sha256.create(),\r\n                        mgf1: {\r\n                            md: forge.md.sha1.create()\r\n                        }\r\n                    });\r\n                default:\r\n                    throw new Error('Invalid algorithm');\r\n            }\r\n        }\r\n    })\r\n});"]}