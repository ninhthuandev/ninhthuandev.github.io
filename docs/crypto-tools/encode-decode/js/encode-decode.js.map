{"version":3,"sources":["pages/crypto-tools/encode-decode/js/encode-decode.js"],"names":["Type","TEXT","Mode","ENCODE","document","addEventListener","selectedType","selectedTypeDisplayName","supportedFile","inputType","input","output","errorMessage","isType","mode","this","type","setSelectedType","setInput","value","console","log","changeInputType","generateOutput","err","message","FILE","outputType","switchMode","DECODE","changeInput","setTypeForCurrentMode","target","changeInputWithFile","event","files","onload","reader","readAsArrayBuffer","_this","getElementById","FileReader","e","result","file","downloadOutputAsFile","Blob","createObjectURL","createElement","outputFileName","encode","dataToStartEncode","split","pop","window","toLowerCase","url","URL","blob","a","href","decode","click","base58Encode","includes","base58Decode","decodeToBytes","base58","Uint8Array","asBytes","bytes"],"mappings":"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","file":"encode-decode.js","sourcesContent":["const Type = {\r\n    TEXT: 'TEXT',\r\n    FILE: 'FILE',\r\n};\r\n\r\nconst Mode = {\r\n    ENCODE: 'ENCODE',\r\n    DECODE: 'DECODE',\r\n}\r\n\r\ndocument.addEventListener('alpine:init', () => {\r\n\r\n    Alpine.store('encodeDecode', {\r\n        selectedType: 'BASE64',\r\n        selectedTypeDisplayName: 'Base-64',\r\n        supportedFile: true,\r\n\r\n        inputType: Type.TEXT,\r\n        outputType: Type.TEXT,\r\n\r\n        input: '',\r\n        output: '',\r\n        outputFileName: 'output.txt',\r\n\r\n        mode: Mode.ENCODE,\r\n\r\n        errorMessage: '',\r\n\r\n        isType(type) {\r\n            return this.selectedType === type;\r\n        },\r\n        setSelectedType(type, selectedTypeDisplayName, supportedFile) {\r\n            this.selectedType = type;\r\n            this.supportedFile = supportedFile === 'true';\r\n            this.selectedTypeDisplayName = selectedTypeDisplayName;\r\n\r\n            if (this.mode === Mode.ENCODE) {\r\n                this.setInput(this.input);\r\n            } else {\r\n                this.setInput('');\r\n            }\r\n        },\r\n        setInput(value) {\r\n            try {\r\n                this.input = value;\r\n                this.generateOutput();\r\n                this.errorMessage = '';\r\n            } catch (err) {\r\n                this.errorMessage = err.message;\r\n                console.log(err);\r\n            }\r\n        },\r\n        changeInputType(inputType) {\r\n            this.setInput('');\r\n            if (this.supportedFile === false && inputType === Type.FILE) {\r\n                return;\r\n            }\r\n\r\n            this.inputType = inputType;\r\n\r\n            if (this.inputType === Type.FILE) {\r\n                this.outputType = Type.TEXT;\r\n            }\r\n        },\r\n        changeOutputType(outputType) {\r\n            if (this.supportedFile === false && outputType === Type.FILE) {\r\n                return;\r\n            }\r\n            this.outputType = outputType;\r\n\r\n            if (this.outputType === Type.FILE) {\r\n                this.inputType = Type.TEXT;\r\n            }\r\n        },\r\n        switchMode() {\r\n            this.mode = this.mode === Mode.ENCODE ? Mode.DECODE : Mode.ENCODE;\r\n            this.setTypeForCurrentMode();\r\n            this.setInput('');\r\n        },\r\n        setTypeForCurrentMode() {\r\n            if (this.mode === Mode.ENCODE) {\r\n                this.outputType = Type.TEXT;\r\n            } else {\r\n                this.inputType = Type.TEXT;\r\n            }\r\n        },\r\n        changeInput(event) {\r\n            this.setInput(event.target.value);\r\n        },\r\n        changeInputWithFile(event) {\r\n            const file = event.target.files[0];\r\n            const reader = new FileReader();\r\n\r\n            reader.onload = (e) => {\r\n                this.setInput(e.target.result);\r\n            };\r\n\r\n            reader.readAsArrayBuffer(file);\r\n        },\r\n        generateOutput() {\r\n            if (this.input === '') {\r\n                this.output = '';\r\n                document.getElementById('inputFile').value = '';\r\n                return;\r\n            }\r\n\r\n            if (this.mode === Mode.ENCODE) {\r\n                this.output = this.encode(this.input);\r\n            } else if (this.outputType === Type.TEXT) {\r\n                this.output = this.decode(this.input);\r\n            } else {\r\n                this.output = this.decodeToBytes(this.input);\r\n            }\r\n        },\r\n        downloadOutputAsFile() {\r\n            this.setInput(this.input);\r\n\r\n            const fileExtension = this.outputFileName.split('.').pop();\r\n            // let mimeType = mime.getType(fileExtension);\r\n\r\n            const blob = new Blob([this.output]);\r\n            const url = URL.createObjectURL(blob);\r\n            const a = document.createElement('a');\r\n            a.href = url;\r\n            a.download = this.outputFileName;\r\n            a.click();\r\n        },\r\n        encode(input) {\r\n            let dataToStartEncode = input;\r\n\r\n            if (this.selectedType === 'BASE58') {\r\n                return base58Encode(input);\r\n            }\r\n\r\n            if (this.selectedType.includes('BASE')) {\r\n                return window[this.selectedType.toLowerCase()].encode(dataToStartEncode);\r\n            } else return '';\r\n        },\r\n        decode(input) {\r\n            let output = '';\r\n\r\n            if (this.selectedType === 'BASE58') {\r\n                output = base58Decode(input);\r\n            } else if (this.selectedType.includes('BASE')) {\r\n                output = window[this.selectedType.toLowerCase()].decode(input);\r\n            } else output = '';\r\n\r\n            return output;\r\n        },\r\n        decodeToBytes(input) {\r\n            let output = '';\r\n\r\n            if (this.selectedType === 'BASE58') {\r\n                output = base58.decode(input);\r\n            } else if (this.selectedType === 'BASE32') {\r\n                output = new Uint8Array(window[this.selectedType.toLowerCase()].decode.asBytes(input));\r\n            } else if (this.selectedType.includes('BASE')) {\r\n                output = new Uint8Array(window[this.selectedType.toLowerCase()].decode.bytes(input));\r\n            } else output = '';\r\n\r\n            return output;\r\n        }\r\n    })\r\n});"]}