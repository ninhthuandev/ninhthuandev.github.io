{"version":3,"sources":["pages/crypto-tools/encode-decode/js/encode-decode.js"],"names":["Type","TEXT","Mode","ENCODE","FileType","CUSTOM","IMG","PDF","MapMimeType","bytes","extension","mimeTypeBytes","bytesLength","unit8ByteArray","mimeType","length","i","Alpine","store","document","supportedFile","outputType","input","output","outputFileName","outputPreviewData","isType","setSelectedType","type","mode","selectedTypeDisplayName","errorMessage","setInput","this","selectedType","generateOutput","err","message","value","inputType","console","log","changeInputType","FILE","switchMode","changeOutputType","target","changeInputWithFile","_this","DECODE","file","event","reader","FileReader","readAsArrayBuffer","changeInput","outputFileMimeType","getElementById","files","onload","encode","decodeToBytes","downloadOutputAsFile","fileExtension","url","decode","dataToStartEncode","includes","window","split","pop","Blob","base58Decode","blob","a","href","base58","Uint8Array","toLowerCase","updateInfoForBytesData","mimeTypeData","asBytes","getMimeTypeFromUnit8ByteArray","concat","URL","createObjectURL"],"mappings":"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","file":"encode-decode.js","sourcesContent":["const Type = {\r\n    TEXT: 'TEXT',\r\n    FILE: 'FILE',\r\n};\r\n\r\nconst Mode = {\r\n    ENCODE: 'ENCODE',\r\n    DECODE: 'DECODE',\r\n}\r\n\r\nconst FileType = {\r\n    CUSTOM: 'CUSTOM',\r\n    IMG: 'IMG',\r\n    PDF: 'PDF',\r\n}\r\n\r\nconst MapMimeType = {\r\n\r\n    \"image/png\": {\r\n        extension: 'png',\r\n        bytes: [137, 80, 78, 71],\r\n    },\r\n    \"image/jpeg\": {\r\n        extension: 'jpeg',\r\n        bytes: [255, 216],\r\n    },\r\n    \"image/gif\": {\r\n        extension: 'gif',\r\n        bytes: [71, 73, 70, 56],\r\n    },\r\n    \"image/svg+xml\": {\r\n        extension: 'svg',\r\n        bytes: [60, 63, 120, 109],\r\n    },\r\n    \"image/webp\": {\r\n        extension: 'webp',\r\n        bytes: [82, 73, 70, 70],\r\n    },\r\n    \"image/tiff\": {\r\n        extension: 'tiff',\r\n        bytes: [77, 77, 0, 42],\r\n    },\r\n    \"image/x-icon\": {\r\n        extension: 'ico',\r\n        bytes: [0, 0, 1, 0],\r\n    },\r\n    \"image/bmp\": {\r\n        extension: 'bmp',\r\n        bytes: [66, 77],\r\n    },\r\n    \"image/vnd.adobe.photoshop\": {\r\n        extension: 'psd',\r\n        bytes: [56, 66, 80, 83],\r\n    },\r\n    \"text/csv\": {\r\n        extension: 'csv',\r\n        bytes: [44],\r\n    },\r\n    \"text/html\": {\r\n        extension: 'html',\r\n        bytes: [60, 104, 116, 109, 108, 62],\r\n    },\r\n    \"text/css\": {\r\n        extension: 'css',\r\n        bytes: [47, 42],\r\n    },\r\n    \"text/javascript\": {\r\n        extension: 'js',\r\n        bytes: [47, 47],\r\n    },\r\n    \"application/json\": {\r\n        extension: 'json',\r\n        bytes: [123],\r\n    },\r\n    \"application/xml\": {\r\n        extension: 'xml',\r\n        bytes: [60, 63, 120, 109, 108],\r\n    },\r\n    \"application/vnd.ms-excel\": {\r\n        extension: 'xls',\r\n        bytes: [208, 207, 17, 224, 161, 177, 26, 225],\r\n    },\r\n    \"application/vnd.ms-powerpoint\": {\r\n        extension: 'ppt',\r\n        bytes: [208, 207, 17, 224, 161, 177, 26, 225],\r\n    },\r\n    \"application/msword\": {\r\n        extension: 'doc',\r\n        bytes: [208, 207, 17, 224, 161, 177, 26, 225],\r\n    },\r\n    \"application/pdf\": {\r\n        extension: 'pdf',\r\n        bytes: [37, 80, 68, 70],\r\n    },\r\n    \"application/zip\": {\r\n        extension: 'zip',\r\n        bytes: [80, 75, 3, 4],\r\n    },\r\n    \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\": {\r\n        extension: 'docx',\r\n        bytes: [80, 75, 3, 4],\r\n    },\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\": {\r\n        extension: 'xlsx',\r\n        bytes: [80, 75, 3, 4],\r\n    },\r\n    \"application/x-rar-compressed\": {\r\n        extension: 'rar',\r\n        bytes: [82, 97, 114, 33, 26, 7, 0],\r\n    },\r\n    \"audio/mpeg\": {\r\n        extension: 'mp3',\r\n        bytes: [255, 251, 3],\r\n    },\r\n    \"audio/wav\": {\r\n        extension: 'wav',\r\n        bytes: [82, 73, 70, 70, 0, 0, 0, 0, 87, 65, 86, 69],\r\n    },\r\n    \"audio/ogg\": {\r\n        extension: 'ogg',\r\n        bytes: [79, 103, 103, 83],\r\n    },\r\n    \"audio/flac\": {\r\n        extension: 'flac',\r\n        bytes: [102, 76, 97, 67],\r\n    },\r\n    \"audio/aac\": {\r\n        extension: 'aac',\r\n        bytes: [255, 251, 3],\r\n    },\r\n    \"video/mp4\": {\r\n        extension: 'mp4',\r\n        bytes: [0, 0, 0, 0, 102, 116, 121, 112, 105, 115, 111, 109, 0, 0, 0, 18, 109, 112, 52, 49],\r\n    },\r\n    \"video/x-msvideo\": {\r\n        extension: 'avi',\r\n        bytes: [82, 73, 70, 70, 0, 0, 0, 0, 65, 86, 73, 32],\r\n    },\r\n    \"video/x-matroska\": {\r\n        extension: 'mkv',\r\n        bytes: [1, 0, 0, 0, 15, 67, 44, 61],\r\n    },\r\n    \"video/quicktime\": {\r\n        extension: 'mov',\r\n        bytes: [0, 0, 0, 20, 102, 116, 121, 112, 113, 116, 32, 32],\r\n    },\r\n    \"video/x-ms-wmv\": {\r\n        extension: 'wmv',\r\n        bytes: [48, 38, 178, 117, 142, 102, 207, 17, 131, 137, 0, 170, 0, 170, 0, 42],\r\n    },\r\n    \"video/webm\": {\r\n        extension: 'webm',\r\n        bytes: [26, 69, 223, 163],\r\n    },\r\n    \"video/x-flv\": {\r\n        extension: 'flv',\r\n        bytes: [70, 76, 86, 1],\r\n    },\r\n    \"video/3gpp\": {\r\n        extension: '3gp',\r\n        bytes: [0, 0, 0, 20, 102, 116, 121, 112, 51, 103, 112, 52],\r\n    },\r\n    \"video/3gpp2\": {\r\n        extension: '3g2',\r\n        bytes: [0, 0, 0, 20, 102, 116, 121, 112, 51, 103, 112, 50],\r\n    },\r\n}\r\n\r\nfunction getMimeTypeFromUnit8ByteArray(unit8ByteArray) {\r\n    for (const mimeType in MapMimeType) {\r\n        const mimeTypeData = MapMimeType[mimeType];\r\n        const mimeTypeBytes = mimeTypeData.bytes;\r\n        let bytesLength = mimeTypeBytes.length;\r\n        for (let i = 0; i < bytesLength; i++) {\r\n            if (unit8ByteArray[i] !== mimeTypeBytes[i]) {\r\n                break;\r\n            }\r\n            if (i === bytesLength - 1) {\r\n                return mimeType;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\ndocument.addEventListener('alpine:init', () => {\r\n\r\n    Alpine.store('encodeDecode', {\r\n        selectedType: 'BASE64',\r\n        selectedTypeDisplayName: 'Base-64',\r\n        supportedFile: true,\r\n\r\n        inputType: Type.TEXT,\r\n        outputType: Type.TEXT,\r\n\r\n        input: '',\r\n        output: '',\r\n        outputFileName: 'output.txt',\r\n        outputFileMimeType: null,\r\n        outputPreviewData: null,\r\n\r\n        mode: Mode.ENCODE,\r\n\r\n        errorMessage: '',\r\n\r\n        isType(type) {\r\n            return this.selectedType === type;\r\n        },\r\n        setSelectedType(type, selectedTypeDisplayName, supportedFile) {\r\n            this.selectedType = type;\r\n            this.supportedFile = supportedFile === 'true';\r\n            this.selectedTypeDisplayName = selectedTypeDisplayName;\r\n\r\n            if (this.mode === Mode.ENCODE) {\r\n                this.setInput(this.input);\r\n            } else {\r\n                this.setInput('');\r\n            }\r\n        },\r\n        setInput(value) {\r\n            try {\r\n                this.input = value;\r\n                this.generateOutput();\r\n                this.errorMessage = '';\r\n            } catch (err) {\r\n                this.errorMessage = err.message;\r\n                console.log(err);\r\n            }\r\n        },\r\n        changeInputType(inputType) {\r\n            this.setInput('');\r\n            if (this.supportedFile === false && inputType === Type.FILE) {\r\n                return;\r\n            }\r\n\r\n            this.inputType = inputType;\r\n\r\n            if (this.inputType === Type.FILE) {\r\n                this.outputType = Type.TEXT;\r\n            }\r\n        },\r\n        changeOutputType(outputType) {\r\n            if (this.supportedFile === false && outputType === Type.FILE) {\r\n                return;\r\n            }\r\n            this.outputType = outputType;\r\n\r\n            if (this.outputType === Type.FILE) {\r\n                this.inputType = Type.TEXT;\r\n            }\r\n\r\n            this.setInput(this.input);\r\n        },\r\n        switchMode() {\r\n            this.mode = this.mode === Mode.ENCODE ? Mode.DECODE : Mode.ENCODE;\r\n            this.setTypeForCurrentMode();\r\n            this.setInput('');\r\n        },\r\n        setTypeForCurrentMode() {\r\n            if (this.mode === Mode.ENCODE) {\r\n                this.outputType = Type.TEXT;\r\n            } else {\r\n                this.inputType = Type.TEXT;\r\n            }\r\n        },\r\n        changeInput(event) {\r\n            this.setInput(event.target.value);\r\n        },\r\n        changeInputWithFile(event) {\r\n            const file = event.target.files[0];\r\n            const reader = new FileReader();\r\n\r\n            reader.onload = (e) => {\r\n                this.setInput(e.target.result);\r\n            };\r\n\r\n            reader.readAsArrayBuffer(file);\r\n        },\r\n        generateOutput() {\r\n            if (this.input === '') {\r\n                this.output = '';\r\n                this.outputFileMimeType = null;\r\n                this.outputPreviewData = null;\r\n                this.outputFileName = 'output.txt';\r\n                document.getElementById('inputFile').value = '';\r\n                return;\r\n            }\r\n\r\n            if (this.mode === Mode.ENCODE) {\r\n                this.output = this.encode(this.input);\r\n            } else if (this.outputType === Type.TEXT) {\r\n                this.output = this.decode(this.input);\r\n            } else {\r\n                this.output = this.decodeToBytes(this.input);\r\n                this.updateInfoForBytesData(this.output);\r\n            }\r\n        },\r\n        downloadOutputAsFile() {\r\n            this.setInput(this.input);\r\n\r\n            const fileExtension = this.outputFileName.split('.').pop();\r\n            // let mimeType = mime.getType(fileExtension);\r\n\r\n            const blob = new Blob([this.output]);\r\n            const url = URL.createObjectURL(blob);\r\n            const a = document.createElement('a');\r\n            a.href = url;\r\n            a.download = this.outputFileName;\r\n            a.click();\r\n        },\r\n        encode(input) {\r\n            let dataToStartEncode = input;\r\n\r\n            if (this.selectedType === 'BASE58') {\r\n                return base58Encode(input);\r\n            }\r\n\r\n            if (this.selectedType.includes('BASE')) {\r\n                return window[this.selectedType.toLowerCase()].encode(dataToStartEncode);\r\n            } else return '';\r\n        },\r\n        decode(input) {\r\n            let output = '';\r\n\r\n            if (this.selectedType === 'BASE58') {\r\n                output = base58Decode(input);\r\n            } else if (this.selectedType.includes('BASE')) {\r\n                output = window[this.selectedType.toLowerCase()].decode(input);\r\n            } else output = '';\r\n\r\n            return output;\r\n        },\r\n        decodeToBytes(input) {\r\n            let output = '';\r\n\r\n            if (this.selectedType === 'BASE58') {\r\n                output = base58.decode(input);\r\n            } else if (this.selectedType === 'BASE32') {\r\n                output = new Uint8Array(window[this.selectedType.toLowerCase()].decode.asBytes(input));\r\n            } else if (this.selectedType.includes('BASE')) {\r\n                output = new Uint8Array(window[this.selectedType.toLowerCase()].decode.bytes(input));\r\n            } else output = '';\r\n\r\n            return output;\r\n        },\r\n        updateInfoForBytesData(output) {\r\n            const mimeType = getMimeTypeFromUnit8ByteArray(output);\r\n            if (mimeType) {\r\n                const mimeTypeData = MapMimeType[mimeType];\r\n                this.outputFileName = `output.${mimeTypeData.extension}`;\r\n                this.outputFileMimeType = mimeType;\r\n\r\n                if (mimeType.includes('image')) {\r\n                    this.outputPreviewData = URL.createObjectURL(new Blob([output], { type: mimeType }));\r\n                }\r\n            } else {\r\n                this.outputFileName = 'output.txt';\r\n                this.outputFileMimeType = null;\r\n            }\r\n        }\r\n    })\r\n});"]}