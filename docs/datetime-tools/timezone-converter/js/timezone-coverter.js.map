{"version":3,"sources":["pages/datetime-tools/timezone-converter/js/timezone-coverter.js"],"names":["darkFlatpickrThemeLink","document","createElement","id","rel","href","FLATPICKR_DATE_FORMAT","NORMAL_DATE_FORMAT","themeValue","Alpine","store","value","querySelector","addEventListener","head","appendChild","_document$querySelect","remove","currentDate","Date","currentDateTimeWithFormat","flatpickr","formatDate","currentTimeZone","DateTimeFormat","resolvedOptions","timeZone","Intl","supportedTimeZonesAndOffsets","supportedTimeZones","map","luxon","DateTime","local","setZone","offsetNameShort","toString","inputDateTime","outputDateTime","inputTimeZone","outputTimeZone","changeInputDateTime","this","convertTZ","luxonOutputDate","fromFormat","zone","toFormat","console","log","enableSeconds","luxonInputDate","enableTime","defaultDate","flatpickrConfig","selectedDates","dateStr","instance","selector","placeHolder","autoCompleteConfig","cache","resultsList","element","list","data","results","length","message","query","setAttribute","noResults","resultItem","highlight","autoCompleteInputTimeZone","autoComplete","_objectSpread","input","focus","event","start","findIndex","setTimeout","index","selection","detail","scroll","find","autoCompleteOutputTimeZone"],"mappings":"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","file":"timezone-coverter.js","sourcesContent":["const darkFlatpickrThemeLink = document.createElement('link');\r\ndarkFlatpickrThemeLink.id = 'darkFlatpickrTheme';\r\ndarkFlatpickrThemeLink.rel = 'stylesheet';\r\ndarkFlatpickrThemeLink.href = 'https://npmcdn.com/flatpickr/dist/themes/dark.css';\r\n\r\nconst FLATPICKR_DATE_FORMAT = 'Y-m-d H:i:S';\r\nconst NORMAL_DATE_FORMAT = 'yyyy-MM-dd HH:mm:ss';\r\n\r\ndocument.addEventListener('alpine:init', () => {\r\n    Alpine.effect(() => {\r\n        const themeValue = Alpine.store('theme').value;\r\n        if (themeValue === 'dark') {\r\n            const darkFlatpickrThemeLinkElement = document.querySelector('#darkFlatpickrTheme');\r\n            if (!darkFlatpickrThemeLinkElement) {\r\n                document.head.appendChild(darkFlatpickrThemeLink);\r\n            }\r\n        } else {\r\n            document.querySelector('#darkFlatpickrTheme')?.remove();\r\n        }\r\n    });\r\n\r\n    let currentDate = new Date();\r\n    let currentDateTimeWithFormat = flatpickr.formatDate(currentDate, FLATPICKR_DATE_FORMAT);\r\n    let currentTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n    let supportedTimeZones = Intl.supportedValuesOf('timeZone');\r\n    let supportedTimeZonesAndOffsets = supportedTimeZones.map(timeZone => {\r\n        const GmtOffset = luxon.DateTime.local().setZone(timeZone).offsetNameShort;\r\n        return {\r\n            timeZone: timeZone,\r\n            offset: GmtOffset,\r\n            toString() {\r\n                return `${this.timeZone} (${this.offset})`;\r\n            }\r\n        };\r\n    });\r\n\r\n    Alpine.store('timeZone', {\r\n        supportedTimeZonesAndOffsets: supportedTimeZonesAndOffsets,\r\n        inputDateTime: currentDateTimeWithFormat,\r\n        outputDateTime: '',\r\n        inputTimeZone: currentTimeZone,\r\n        outputTimeZone: supportedTimeZones[0],\r\n\r\n        changeInputDateTime(event) {\r\n            this.convertTZ();\r\n        },\r\n        convertTZ() {\r\n            console.log(this.inputDateTime, this.inputTimeZone, this.outputTimeZone);\r\n            const luxonInputDate = luxon.DateTime.fromFormat(this.inputDateTime, NORMAL_DATE_FORMAT, { zone: this.inputTimeZone });\r\n            const luxonOutputDate = luxonInputDate.setZone(this.outputTimeZone);\r\n            this.outputDateTime = luxonOutputDate.toFormat(NORMAL_DATE_FORMAT);\r\n            console.log(this.outputDateTime);\r\n        }\r\n    });\r\n\r\n    const flatpickrConfig = {\r\n        enableTime: true,\r\n        dateFormat: FLATPICKR_DATE_FORMAT,\r\n        defaultDate: currentDateTimeWithFormat,\r\n        enableSeconds: true,\r\n        onValueUpdate: function (selectedDates, dateStr, instance) {\r\n            Alpine.store('timeZone').inputDateTime = dateStr;\r\n        }\r\n    };\r\n    flatpickr(\"#datetime-picker-input\", flatpickrConfig);\r\n\r\n    const autoCompleteConfig = {\r\n        selector: \"#autoComplete\",\r\n        placeHolder: \"Search for Food...\",\r\n        data: {\r\n            src: supportedTimeZonesAndOffsets,\r\n            cache: true,\r\n        },\r\n        resultsList: {\r\n            maxResults: 10000,\r\n            element: (list, data) => {\r\n                if (!data.results.length) {\r\n                    // Create \"No Results\" message element\r\n                    const message = document.createElement(\"div\");\r\n                    // Add class to the created element\r\n                    message.setAttribute(\"class\", \"no_result\");\r\n                    // Add message text content\r\n                    message.innerHTML = `<span>Found No Results for \"${data.query}\"</span>`;\r\n                    // Append message element to the results list\r\n                    list.prepend(message);\r\n                }\r\n            },\r\n            noResults: true,\r\n        },\r\n        resultItem: {\r\n            highlight: true\r\n        },\r\n    };\r\n\r\n\r\n    const autoCompleteInputTimeZone = new autoComplete({\r\n        ...autoCompleteConfig,\r\n        selector: \"#autoCompleteInputTimeZone\",\r\n        events: {\r\n            input: {\r\n                focus: (event) => {\r\n                    autoCompleteInputTimeZone.start(' ');\r\n                    const index = supportedTimeZonesAndOffsets.findIndex(timeZone => timeZone.timeZone === Alpine.store('timeZone').inputTimeZone);\r\n                    setTimeout(() => {\r\n                        autoCompleteInputTimeZone.goTo(index);\r\n                    }, 0);\r\n                },\r\n                selection: (event) => {\r\n                    const selection = event.detail.selection.value;\r\n                    autoCompleteInputTimeZone.input.value = selection.toString();\r\n                    Alpine.store('timeZone').inputTimeZone = selection.timeZone;\r\n                    Alpine.store('timeZone').convertTZ();\r\n\r\n                    autoCompleteInputTimeZone.input.blur();\r\n                }\r\n            },\r\n            list: {\r\n                scroll: (event) => {\r\n                    console.log(\"Results List scrolled!\");\r\n                }\r\n            }\r\n        }\r\n    });\r\n    autoCompleteInputTimeZone.input.value = supportedTimeZonesAndOffsets.find(timeZone => timeZone.timeZone === currentTimeZone).toString();\r\n\r\n    const autoCompleteOutputTimeZone = new autoComplete({\r\n        ...autoCompleteConfig,\r\n        selector: \"#autoCompleteOutputTimeZone\",\r\n        events: {\r\n            input: {\r\n                focus: (event) => {\r\n                    autoCompleteOutputTimeZone.start(' ');\r\n                    const index = supportedTimeZonesAndOffsets.findIndex(timeZone => timeZone.timeZone === Alpine.store('timeZone').inputTimeZone);\r\n                    setTimeout(() => {\r\n                        autoCompleteOutputTimeZone.goTo(index);\r\n                    }, 0);\r\n                },\r\n                selection: (event) => {\r\n                    const selection = event.detail.selection.value;\r\n                    autoCompleteOutputTimeZone.input.value = selection.toString();\r\n                    Alpine.store('timeZone').outputTimeZone = selection.timeZone;\r\n                    Alpine.store('timeZone').convertTZ();\r\n\r\n                    autoCompleteOutputTimeZone.input.blur();\r\n                }\r\n            },\r\n            list: {\r\n                scroll: (event) => {\r\n                    console.log(\"Results List scrolled!\");\r\n                }\r\n            }\r\n        }\r\n    });\r\n    autoCompleteOutputTimeZone.input.value = supportedTimeZonesAndOffsets[0].toString();\r\n\r\n    Alpine.store('timeZone').convertTZ();\r\n});"]}